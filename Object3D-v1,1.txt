// *** Triple A ***
//** This Algoritm product by Ali Mihan Doust and Ali Vojdany **
// -- Define all my needed functions --
// -- 3D Rotate Object Function --
function Point2D(x, y)
{
    this.x = x;
    this.y = y;
} // End of the function
function Point3D(x, y, z)
{
    this.x = x;
    this.y = y;
    this.z = z;
} // End of the function
function Object3D(screenX, screenY)
{
    this.screenX = screenX;
    this.screenY = screenY;
    this.D = 500;
    this.PointList = new Array();
    this.FaceList = new Array();
    this.NumPoints = 0;
    this.NumFaces = 0;
} // End of the function
function Stop3D(objName)
{
    _root.onMouseDown = null;
    _root.onMouseMove = null;
    _root.onMouseUp = null;
    _root.onEnterFrame = null;
    this[objName].Delete();
    delete this[objName];
} // End of the function
Object3D.prototype.AddPoint = function (x, y, z)
{
    this.PointList[this.NumPoints++] = new Point3D(x, y, z);
};
Object3D.prototype.AddFace = function (FaceName, Face, fColour, fAlpha, lColour, lAlpha)
{
    this.FaceList[this.NumFaces] = Face;
    this.FaceList[this.NumFaces].FaceName = FaceName;
    this.FaceList[this.NumFaces].fColour = fColour;
    this.FaceList[this.NumFaces].fAlpha = fAlpha;
    this.FaceList[this.NumFaces].lColour = lColour;
    this.FaceList[this.NumFaces++].lAlpha = lAlpha;
};
Object3D.prototype.DrawFace = function (Face, depth)
{
    var _l5 = new Array();
    var _l4 = 0;
    while (_l4 < Face.length)
    {
        _l5[_l4] = new Point2D(this.D * (this.PointList[Face[_l4]].x / (this.PointList[Face[_l4]].z + this.D)) + this.screenX, this.D * (this.PointList[Face[_l4]].y / (this.PointList[Face[_l4]].z + this.D)) + this.screenY);
        _l4++;
    } // end while
    if (this.getVisible(_l5[0], _l5[1], _l5[2]))
    {
        _root.createEmptyMovieClip(Face.FaceName, depth);
        tellTarget(_root[Face.FaceName])
        {
            beginFill(Face.fColour, Face.fAlpha);
            lineStyle(0, Face.lColour, Face.lAlpha);
            moveTo(_l5[0].x, _l5[0].y);
            _l4 = 1;
            while (_l4 < Face.length)
            {
                lineTo(_l5[_l4].x, _l5[_l4].y);
                _l4++;
            } // end while
            lineTo(_l5[0].x, _l5[0].y);
            endFill();
        } // End of TellTarget
    }
    else
    {
        _root[Face.FaceName].removeMovieClip();
    } // end if
};
Object3D.prototype.getVisible = function (p1, p2, p3)
{
    return((p2.x - p1.x) * (p3.y - p1.y) < (p3.x - p1.x) * (p2.y - p1.y));
};
Object3D.prototype.DrawObject3D = function ()
{
    var _l2 = 0;
    while (_l2 < this.FaceList.length)
    {
        this.DrawFace(this.FaceList[_l2], _l2);
        _l2++;
    } // end while
};
Object3D.prototype.RotateObject3D = function (x, y)
{
    var _l2 = 0;
    while (_l2 < this.PointList.length)
    {
        var _l5 = this.PointList[_l2].x;
        var _l4 = this.PointList[_l2].y;
        var _l3 = this.PointList[_l2].z;
        var _l10 = _l4 * Math.cos(x) + _l3 * Math.sin(x);
        var _l6 = _l3 * Math.cos(x) - _l4 * Math.sin(x);
        var _l11 = _l5 * Math.cos(y) - _l6 * Math.sin(y);
        var _l9 = _l5 * Math.sin(y) + _l6 * Math.cos(y);
        this.PointList[_l2] = new Point3D(_l11, _l10, _l9);
        _l2++;
    } // end while
};
Object3D.prototype.Delete = function ()
{
    var _l2 = 0;
    while (_l2 < this.FaceList.length)
    {
        removeMovieClip(this.FaceList[_l2].FaceName);
        _l2++;
    } // end while
};
var fx;
var fy;
var gh;
var fAlpha;
var lAlpha;
var obj;
var den;
var omx;
var omy;
var xa;
var ya;
var mb;
var Render;
var FrameRate;
FrameRate = 30;
Render = true;
omx = 0;
omy = 0;
xa = 0;
ya = 0.001000;
gh = 50;
fAlpha = 20;
lAlpha = 80;
fx = 400;
fy = 275 - gh;
den = 0.980000;
mb = false;
Robj = new Object3D(fx, fy);
Robj.AddPoint(gh, -gh, gh);
Robj.AddPoint(gh, gh, gh);
Robj.AddPoint(-gh, gh, gh);
Robj.AddPoint(-gh, -gh, gh);
Robj.AddPoint(-gh, -gh, -gh);
Robj.AddPoint(-gh, gh, -gh);
Robj.AddPoint(gh, gh, -gh);
Robj.AddPoint(gh, -gh, -gh);
Robj.AddFace("Face0", [0, 1, 2, 3], 16711680, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face1", [4, 5, 6, 7], 16711680, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face2", [7, 6, 1, 0], 16711680, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face3", [6, 5, 2, 1], 16711680, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face4", [5, 4, 3, 2], 16711680, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face5", [4, 7, 0, 3], 16711680, fAlpha, 16777215, lAlpha);
Robj.RotateObject3D(0, 0.800000);
gh = gh * 1.200000;
xup = -20;
Robj.AddPoint(gh, -gh + xup, gh);
Robj.AddPoint(gh, -gh + xup, -gh);
Robj.AddPoint(-gh, -gh + xup, -gh);
Robj.AddPoint(-gh, -gh + xup, gh);
Robj.AddPoint(0, 2 * gh, 0);
Robj.AddFace("Face6", [12, 8, 9], 255, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face7", [12, 9, 10], 255, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face8", [12, 10, 11], 255, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face9", [12, 11, 8], 255, fAlpha, 16777215, lAlpha);
Robj.AddFace("Face10", [11, 10, 9, 8], 255, fAlpha, 16777215, lAlpha);
_root.onEnterFrame = function ()
{
    xa = (fy - _root._ymouse) / 1500;
    ya = (_root._xmouse - fx) / 1500;
    Render = true;
};
_root.onMouseDown = function ()
{
    mb = true;
    ya = 0;
    xa = 0;
    omx = _root._xmouse;
    omy = _root._ymouse;
    onEnterFrame = null;
};
_root.onMouseMove = function ()
{
    if (mb)
    {
        ya = (_root._xmouse - omx) / 35;
        xa = (omy - _root._ymouse) / 35;
        Render = true;
        omx = _xmouse;
        omy = _ymouse;
    } // end if
};
_root.onMouseUp = function ()
{
    mb = false;
    _root.onEnterFrame = function ()
    {
        if (Math.abs(xa) < 0.000100 && Math.abs(ya) < 0.000100)
        {
            _root.onEnterFrame = null;
        } // end if
        xa = xa * den;
        ya = ya * den;
        Render = true;
    };
};
this.dl.onRelease = function ()
{
    Stop3D("Robj");
};
stop();
RobjFr = setInterval(function ()
{
    if (Render)
    {
        Robj.RotateObject3D(xa, ya);
        Robj.DrawObject3D();
        Render = false;
    } // end if
}, 1000 / FrameRate);
